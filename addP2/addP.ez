/*_____________________________________________________________

Template for an EASEA evolutionary algorithm for easea v1.0.3
_______________________________________________________________*/

\User declarations : // This section is copied on top of the output file
#include <fstream>
#include <string>
#include <iostream>
#define M_PI 3.14159265358979323846
#include <math.h>  
#include <ctype.h>
#include <cstring>
#include <sstream>
#include <cstdlib>
#include <stdio.h>

double **Nodes;
double **Transfer;
double *Ut;
double **At;
double *b;

int M=0;
int N=0;
int t=0;
int h=0;
int nodeSize=0;
int nodeDim=0;

\end

\User functions:

int strtoint(std::string text) { 
	int a;
	std::stringstream stream;
	for(int b = 0; b < text.size(); b++) {
		if(!isdigit(text.at(b))) {
			text.erase(b, 1);
		}
	}
	stream<<text<<std::flush;
	stream>>a;
	return a;
}


void displayMatrix(double **mat, int rows, int cols)
{
	for (int i=0; i<rows; i++)
	{
		std::cout << i << " ";
		for (int j=0; j<cols; j++)
		{

		
			std::cout << mat[i][j] << " ";
		}
		std::cout << "" << "\n";
	}

}
void displayVector(double *vec,int size)
{
for (int j=0; j<size; j++)
		{
			std::cout << j << " ";
		
			std::cout << vec[j] << "\n";
		}
}

void readMatrix(char *name, double** &Transfer, int &M, int &N)
{
	std::ifstream file(name);
	std::string str; 
	std::getline(file, str);
	M=strtoint(str);
	std::getline(file, str);
	N=strtoint(str);
	Transfer = new double*[M];
for(int i = 0; i < M; ++i)
    Transfer[i] = new double[N];

	for (int i=0; i<M; i++)
	{
		std::getline(file, str);
		std::string word;
		std::stringstream stream(str);
		for (int j=0; j<N; j++)
		{
			std::getline(stream, word, ' ');
			Transfer[i][j]=atof(word.c_str());
			//std::istringstream os(word.c_str());
    			//os >> Transfer[i][j];
		}
	}
	std::cout << name << " Matrix loaded"<< "\n";
}

void readVector(char *name, double* &Ut,int &t)
{
	std::ifstream file(name);
	std::string str; 
	std::getline(file, str);
	t=strtoint(str);
	Ut = new double[t];
	for (int i=0; i<t; i++)
	{
		std::getline(file, str);
		std::string word;
		std::stringstream stream(str);
		std::getline(stream, word, ' ');
		Ut[i]=atof(word.c_str());

	}
std::cout << name<<" Vector loaded"<< std::endl;	
}

void printVector(double *vec,int size, char *name)
{


FILE *f = fopen(name, "w");
if (f == NULL)
{
    printf("Error opening file!\n");
    exit(1);
}
fprintf(f, "%i\n", size);

for (int i=0;i<size;i++)
{

	fprintf(f, "%f\n", vec[i]);
}

fclose(f);



}

void printMatrix(double **matrix, int rows, int cols, char *name)
{
	FILE *f = fopen(name, "w");
	if (f == NULL)
	{
		printf("Error opening file!\n");
		exit(1);
	}
	fprintf(f, "%i\n", rows);
	fprintf(f, "%i\n", cols);

	for (int i=0;i<rows;i++)
	{
		for (int j=0;j<cols;j++)
		{
			fprintf(f, "%f ", matrix[i][j]);
		}
		fprintf(f, "\n");
	}
	fclose(f);
}

double* Mult(double **matrix0, double *vector0, int rows, int cols)
{

    double *outputvector = new double[rows];
	
    for (int i = 0; i < rows; i++)
    {
	outputvector[i]=0.0;

        for (int j = 0; j < cols; j++)
        {

            outputvector[i] += matrix0[i][j] * vector0[j];
	    
        }

    }

    return outputvector;
}

double getCost(double a,double b, double c)
{

double* Uh=new double[h];
	   for (int i = 0; i < h; i++ )
	   {
	    	double x=(Nodes[i][0]-a);
		double y=(Nodes[i][1]-b);
		double z=(Nodes[i][2]-c);

		Uh[i]=1.0/(4.0*M_PI*sqrt(x*x+y*y+z*z));
	   }

	double *Uttemp=Mult(Transfer,Uh,M,N);

	double temp=0.0;
	for (int i = 0; i < t; i++ )
	   {
	    	temp+=abs(Ut[i]-Uttemp[i]);
	   }

free(Uh);
free(Uttemp);
  return temp;
}

double getCost2(double a,double b, double c, double d)
{

double* Uh=new double[h];
	   for (int i = 0; i < h; i++ )
	   {
	    	double x=(Nodes[i][0]-a);
		double y=(Nodes[i][1]-b);
		double z=(Nodes[i][2]-c);

		Uh[i]=1.0/(4.0*M_PI*sqrt(x*x+y*y+z*z))+d;
	   }

	double *Uttemp=Mult(Transfer,Uh,M,N);

	double temp=0.0;
	for (int i = 0; i < t; i++ )
	   {
	    	temp+=abs(Ut[i]-Uttemp[i]);
	   }

free(Uh);
free(Uttemp);
  return temp;
}



double Dot(double *vector1, double *vector2, int size)
  {
    double sum = 0.0;
    double vectorDotProductOut = 0.0;
	for (int i = 0; i < size; i++ )

	{
      		sum += vector1[i] * vector2[i];
    	}
    vectorDotProductOut = sum;
return vectorDotProductOut;
  }

double* MultC(double *vector, int size, double c)
  {
    double *outputvector = new double[size];
	for (int i = 0; i < size; i++ )

	{
      		outputvector[i]=vector[i]*c;
    	}

return outputvector;
  }

double* Add(double *vector1, double *vector2, int size)
  {
    double *outputvector = new double[size];

	for (int i = 0; i < size; i++ )

	{
      		outputvector[i]= vector1[i] + vector2[i];
    	}

return outputvector;
  }

double* Sub(double *vector1, double *vector2, int size)
  {
    double *outputvector = new double[size];

	for (int i = 0; i < size; i++ )

	{
      		outputvector[i]= vector1[i] - vector2[i];
    	}

return outputvector;
  }

double** Tvector(double* vector,int size)
{

	double** TransVector= new double*[1];
	for(int i = 0; i < 1; ++i)
    		TransVector[i] = new double[size];

	for (int i = 0; i < size; i++ )

	{
      		TransVector[0][i]= vector[i];
		
    	}
	return TransVector;
}


        double** MultM(double** Matrix1, double** Matrix2, int rowsMatrix1, int colsMatrix1,int rowsMatrix2,int colsMatrix2)
        {
            //double** matrixdouble = new double[Matrix1.GetLength(0), Matrix2.GetLength(1)];
		double** matrixdouble= new double*[rowsMatrix1];
	for(int i = 0; i < rowsMatrix1; ++i)
    		matrixdouble[i] = new double[colsMatrix2];

            for (int i = 0; i < rowsMatrix1; i++)
            {
                for (int j = 0; j < colsMatrix2; j++)
                {
                    double suma = 0;
                    for (int k = 0; k < colsMatrix1; k++)
                    {
                        suma += Matrix1[i][ k] * Matrix2[k][ j];
                    }
                    matrixdouble[i][ j] = suma;
                }
            }
            return matrixdouble;
        }

 double** MT(double** matrix, int rowsMatrix1, int colsMatrix1)
        {
            //double[,] matrixout = new double[matrix.GetLength(1), matrix.GetLength(0)];

double** matrixout= new double*[colsMatrix1];
	for(int i = 0; i < colsMatrix1; ++i)
    		matrixout[i] = new double[rowsMatrix1];

            for (int i = 0; i < colsMatrix1; i++)
            {
                for (int j = 0; j < rowsMatrix1; j++)
                {
                    matrixout[i][j] = matrix[j][i];
                }

            }
            return matrixout;
        }

double* CG(double **A,double* b, double* x0,int rowsA,int colsA)
{	
	double* x=new double[colsA];
	//r=b-A*x;
	double* Ax=Mult(A,x,rowsA,colsA);
	double* r=Sub(Ax,b,rowsA);
	double* p=r;
	//rsold=r'*r;
	double rsold=Dot(r,r,rowsA);
    	
 
	//for i=1:1e6
	int iter=0;
	double res=1e6;
	while (iter <100000 && res>1e-10)
	{
		//Ap=A*p;
		double* Ap=Mult(A,p,rowsA,colsA);
		//alpha=rsold/(p'*Ap);
		double	pAp=Dot(p,Ap,rowsA);
		double	alpha=rsold/pAp;
		//x=x+alpha*p;
		double* alphap=MultC(p,rowsA,alpha);
		x=Add(x,alphap,rowsA);
		//r=r-alpha*Ap;
        	double* alphaAp=MultC(Ap,rowsA,alpha);
		r=Sub(r,alphaAp,rowsA);
		//rsnew=r'*r;
		double	rsnew=Dot(r,r,colsA);
		//if sqrt(rsnew)<1e-10
        	//      break;
        	//end
        	res=sqrt(rsnew);
        	iter=iter+1;
		//p=r+rsnew/rsold*p;
        	double	beta=rsnew/rsold;
		double*	betap=MultC(p,rowsA,beta);
		p=Add(r,betap,rowsA);
        	//rsold=rsnew
		rsold=rsnew;
		
		//displayVector(x,rowsA);
	}	
	cout<<iter<<endl;
	return x;
}

\end

\Before everything else function:
{

	readMatrix(const_cast<char *>("Transfer.matrix"),Transfer,M,N);
	readVector(const_cast<char *>("Ut.txt"),Ut,t);
	readMatrix(const_cast<char *>("Nodes.matrix"),Nodes,nodeSize,nodeDim);
	cout<<M<<endl;
	cout<<N<<endl;
	cout<<nodeSize<<endl;
	cout<<nodeDim<<endl;
	At=MT(Transfer,  M,  N);
	cout<<"At ready"<<endl;
	double** A=MultM(At, Transfer, N, M,M,N);
	cout<<"A ready"<<endl;
	printMatrix(A,N,N,"A");

	double* b=Mult(At,Ut,N,M);
	cout<<"b ready"<<endl;

	
	double* x0=new double[N];
	double* x =CG(A,b, x0,M,M);
	double* ut2=Mult(Transfer,x,M,N);
	printVector(x,N,"x");
	printVector(ut2,M,"ut2");
	h=N;

}
\end

\After everything else function:

//std::cout << (*population) ;

cout <<(population->Best->serialize())<<endl;
string str=population->Best->serialize();

	string word;
	stringstream stream(str);

		getline(stream, word, ' ');
		double d=atof(word.c_str());
		getline(stream, word, ' ');
		double c=atof(word.c_str());
		getline(stream, word, ' ');
		double b=atof(word.c_str());
		getline(stream, word, ' ');
		double a=atof(word.c_str());


cout << a << "\n";
cout << b << "\n";
cout << c << "\n";
cout << d << "\n";

double cost=getCost2(a,b,c,d);
cout<<cost<<endl;
double* Uh=new double[h];
	   for (int i = 0; i < h; i++ )
	   {
	    	double x=(Nodes[i][0]-a);
		double y=(Nodes[i][1]-b);
		double z=(Nodes[i][2]-c);

		Uh[i]=1.0/(4.0*M_PI*sqrt(x*x+y*y+z*z))+d;
	   }

	double *Uttemp=Mult(Transfer,Uh,M,N);

	double temp=0.0;
	for (int i = 0; i < t; i++ )
	   {
	    	temp+=abs(Ut[i]-Uttemp[i]);
	   }
printVector(Uttemp,t,"Uttemp");
printVector(Uh,h  ,"Uh");
\end

\At the beginning of each generation function:{
}
\end

\At the end of each generation function:

\end

\At each generation before reduce function:
  //cout << "At each generation before replacement function called" << endl;

\end

\User classes :
GenomeClass { 
  // need to declare the genome here
  double a, b, c, d;
}
\end

\GenomeClass::display:
	printf("%f %f %f %f\n",Genome.a, Genome.b, Genome.c, Genome.d);
//printf("%f \n",Genome.a);
\end


\GenomeClass::initialiser : // "initializer" is also accepted
  // the genome to initialise is known as "Genome"
 Genome.a=random(-100.0,100.0);
 Genome.b=random(-100.0,100.0);
 Genome.c=random(-100.0,100.0);
 Genome.d=random(-100.0,100.0);
\end

\GenomeClass::crossover : 

double cost=getCost2(parent1.a,parent1.b,parent1.c,parent1.d);
child.a=parent1.a;
child.b=parent1.b;
child.c=parent1.c;
child.d=parent1.d;

double costTemp=getCost2(parent1.a,parent1.b,parent2.c,parent1.d);
if (costTemp<=cost)
{
child.a=parent1.a;
child.b=parent1.b;
child.c=parent2.c;
child.d=parent1.d;
cost=costTemp;
}

costTemp=getCost2(parent1.a,parent2.b,parent1.c,parent1.d);
if (costTemp<=cost)
{
child.a=parent1.a;
child.b=parent2.b;
child.c=parent1.c;
child.d=parent1.d;
cost=costTemp;
}

costTemp=getCost2(parent1.a,parent2.b,parent2.c,parent1.d);
if (costTemp<=cost)
{
child.a=parent1.a;
child.b=parent2.b;
child.c=parent2.c;
child.d=parent1.d;
cost=costTemp;
}

costTemp=getCost2(parent2.a,parent1.b,parent1.c,parent1.d);
if (costTemp<=cost)
{
child.a=parent2.a;
child.b=parent1.b;
child.c=parent1.c;
child.d=parent1.d;
cost=costTemp;
}

costTemp=getCost2(parent2.a,parent1.b,parent2.c,parent1.d);
if (costTemp<=cost)
{
child.a=parent2.a;
child.b=parent1.b;
child.c=parent2.c;
child.d=parent1.d;
cost=costTemp;
}

costTemp=getCost2(parent2.a,parent2.b,parent1.c,parent1.d);
if (costTemp<=cost)
{
child.a=parent2.a;
child.b=parent2.b;
child.c=parent1.c;
child.d=parent1.d;
cost=costTemp;
}

costTemp=getCost2(parent2.a,parent2.b,parent2.c,parent1.d);
if (costTemp<=cost)
{
child.a=parent2.a;
child.b=parent2.b;
child.c=parent2.c;
child.d=parent1.d;
cost=costTemp;
}

//second batch
costTemp=getCost2(parent1.a,parent1.b,parent1.c,parent2.d);
child.a=parent1.a;
child.b=parent1.b;
child.c=parent1.c;
child.d=parent2.d;

costTemp=getCost2(parent1.a,parent1.b,parent2.c,parent2.d);
if (costTemp<=cost)
{
child.a=parent1.a;
child.b=parent1.b;
child.c=parent2.c;
child.d=parent2.d;
cost=costTemp;
}

costTemp=getCost2(parent1.a,parent2.b,parent1.c,parent2.d);
if (costTemp<=cost)
{
child.a=parent1.a;
child.b=parent2.b;
child.c=parent1.c;
child.d=parent2.d;
cost=costTemp;
}

costTemp=getCost2(parent1.a,parent2.b,parent2.c,parent2.d);
if (costTemp<=cost)
{
child.a=parent1.a;
child.b=parent2.b;
child.c=parent2.c;
child.d=parent2.d;
cost=costTemp;
}

costTemp=getCost2(parent2.a,parent1.b,parent1.c,parent2.d);
if (costTemp<=cost)
{
child.a=parent2.a;
child.b=parent1.b;
child.c=parent1.c;
child.d=parent2.d;
cost=costTemp;
}

costTemp=getCost2(parent2.a,parent1.b,parent2.c,parent2.d);
if (costTemp<=cost)
{
child.a=parent2.a;
child.b=parent1.b;
child.c=parent2.c;
child.d=parent2.d;
cost=costTemp;
}

costTemp=getCost2(parent2.a,parent2.b,parent1.c,parent2.d);
if (costTemp<=cost)
{
child.a=parent2.a;
child.b=parent2.b;
child.c=parent1.c;
child.d=parent2.d;
cost=costTemp;
}

costTemp=getCost2(parent2.a,parent2.b,parent2.c,parent2.d);
if (costTemp<=cost)
{
child.a=parent2.a;
child.b=parent2.b;
child.c=parent2.c;
child.d=parent2.d;
cost=costTemp;
}

\end

\GenomeClass::mutator : // Must return the number of mutations
   if (tossCoin(0.4)){
     Genome.a+=random(-1.0,1.0);
     return 1;
   }
   if (tossCoin(0.4)){
     Genome.b+=random(-1.0,1.0);
     return 1;
   }
   if (tossCoin(0.4)){
     Genome.c+=random(-1.0,1.0);
     return 1;
   }
if (tossCoin(0.4)){
     Genome.d+=random(-0.1,0.1);
     return 1;
   }
  return 0 ;
\end

\GenomeClass::evaluator : // Returns the score as a real value
 	//IndividualImpl::printOn(std::cout); 

	double temp=getCost2(Genome.a,Genome.b,Genome.c, Genome.d);

  return temp;
\end

\User Makefile options: 
\end

\Default run parameters :        // Please let the parameters appear in this order
  Number of generations : 100   // NB_GEN
  Time limit: 0 			           // In seconds, 0 to deactivate
  Population size : 100
  Offspring size : 50% // or a xx%
  Mutation probability : 1       // MUT_PROB
  Crossover probability : 1      // XOVER_PROB
  Evaluator goal : minimise      // maximise
  Selection operator: Tournament 20
  Surviving parents: 50        // Percentage or absolute  
  Surviving offspring: 50      // Percentage or absolute  
  Reduce parents operator: Tournament 10
  Reduce offspring operator: Tournament 10
  Final reduce operator: Tournament 7

  Elitism: Strong			           // Weak or Strong
  Elite: 1
  Print stats: true				       // Default: 1
  Generate csv stats file:true			
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:false				         // Default: 0

  Remote island model: false
  IP file: ip.txt 			         // List of IP:PORT of islands to send individuals to
  Server port : 2929
  Migration probability: 0.33    // Probability of sending an individual per generation

  Save population: true
  Start from file:false
\end

